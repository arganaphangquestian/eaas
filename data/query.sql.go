// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package data

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const addCustomer = `-- name: AddCustomer :one
INSERT INTO customers(name, email, password, address, balance)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, password, address, balance
`

type AddCustomerParams struct {
	Name     string
	Email    string
	Password sql.NullString
	Address  sql.NullString
	Balance  pgtype.Numeric
}

func (q *Queries) AddCustomer(ctx context.Context, arg AddCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, addCustomer,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.Balance,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Address,
		&i.Balance,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT id, name, email, password, address, balance FROM customers
`

func (q *Queries) GetCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Address,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
